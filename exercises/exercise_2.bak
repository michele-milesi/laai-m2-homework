#lang racket

; exercise 1.35
(define tolerance 0.00001)

(define (fixed-point f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

; definition of transformation x -> 1 + 1/x
(define (transformation x)
  (+ 1 (/ 1 x)))

(define phi (/ (+ 1 (sqrt 5)) 2))

; exercise 1.36
(define (fixed-point-print-seq f first-guess)
  (define (close-enough? v1 v2)
    (< (abs (- v1 v2))
       tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))

(define (log-transformation x)
  (/ (log 1000) (log x)))

(define (average x y) 
  (/ (+ x y) 2))

(define (log-transformation-avg-dmp)
  (fixed-point-print-seq (lambda (x) (average x (/ (log 1000) (log x)))) 1.1))


